//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace BasCal_SilverlightClient.EventDataService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventTypeDTO", Namespace="http://schemas.datacontract.org/2004/07/BasCal_WCF_Host.DTO_Models")]
    public partial class EventTypeDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int TypeIdField;
        
        private string TypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((this.TypeIdField.Equals(value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpcomingEventDTO", Namespace="http://schemas.datacontract.org/2004/07/BasCal_WCF_Host.DTO_Models")]
    public partial class UpcomingEventDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime EndTimeField;
        
        private System.Guid EventIdField;
        
        private string LocationField;
        
        private string NameField;
        
        private System.DateTime StartTimeField;
        
        private string SummaryField;
        
        private string TypeField;
        
        private int TypeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Summary {
            get {
                return this.SummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.SummaryField, value) != true)) {
                    this.SummaryField = value;
                    this.RaisePropertyChanged("Summary");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeId {
            get {
                return this.TypeIdField;
            }
            set {
                if ((this.TypeIdField.Equals(value) != true)) {
                    this.TypeIdField = value;
                    this.RaisePropertyChanged("TypeId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpcomingEventShortDTO", Namespace="http://schemas.datacontract.org/2004/07/BasCal_WCF_Host.DTO_Models")]
    public partial class UpcomingEventShortDTO : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime EndTimeField;
        
        private System.Guid EventIdField;
        
        private string NameField;
        
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EventId {
            get {
                return this.EventIdField;
            }
            set {
                if ((this.EventIdField.Equals(value) != true)) {
                    this.EventIdField = value;
                    this.RaisePropertyChanged("EventId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventDataService.IEventDataService")]
    public interface IEventDataService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventDataService/FetchEventTypes", ReplyAction="http://tempuri.org/IEventDataService/FetchEventTypesResponse")]
        System.IAsyncResult BeginFetchEventTypes(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO> EndFetchEventTypes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventDataService/AddOrUpdateEvent", ReplyAction="http://tempuri.org/IEventDataService/AddOrUpdateEventResponse")]
        System.IAsyncResult BeginAddOrUpdateEvent(BasCal_SilverlightClient.EventDataService.UpcomingEventDTO eve, System.AsyncCallback callback, object asyncState);
        
        string EndAddOrUpdateEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventDataService/FetchEventsByMonth", ReplyAction="http://tempuri.org/IEventDataService/FetchEventsByMonthResponse")]
        System.IAsyncResult BeginFetchEventsByMonth(int m, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> EndFetchEventsByMonth(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventDataService/FetchEventByGuid", ReplyAction="http://tempuri.org/IEventDataService/FetchEventByGuidResponse")]
        System.IAsyncResult BeginFetchEventByGuid(System.Guid guid, System.AsyncCallback callback, object asyncState);
        
        BasCal_SilverlightClient.EventDataService.UpcomingEventDTO EndFetchEventByGuid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventDataService/FetchUpcomingEvents", ReplyAction="http://tempuri.org/IEventDataService/FetchUpcomingEventsResponse")]
        System.IAsyncResult BeginFetchUpcomingEvents(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO> EndFetchUpcomingEvents(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventDataService/FetchUpcomingEventsShort", ReplyAction="http://tempuri.org/IEventDataService/FetchUpcomingEventsShortResponse")]
        System.IAsyncResult BeginFetchUpcomingEventsShort(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> EndFetchUpcomingEventsShort(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IEventDataService/Add", ReplyAction="http://tempuri.org/IEventDataService/AddResponse")]
        System.IAsyncResult BeginAdd(int a, int b, System.AsyncCallback callback, object asyncState);
        
        int EndAdd(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventDataServiceChannel : BasCal_SilverlightClient.EventDataService.IEventDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchEventTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchEventTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOrUpdateEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOrUpdateEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchEventsByMonthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchEventsByMonthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchEventByGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchEventByGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public BasCal_SilverlightClient.EventDataService.UpcomingEventDTO Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((BasCal_SilverlightClient.EventDataService.UpcomingEventDTO)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchUpcomingEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchUpcomingEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FetchUpcomingEventsShortCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public FetchUpcomingEventsShortCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventDataServiceClient : System.ServiceModel.ClientBase<BasCal_SilverlightClient.EventDataService.IEventDataService>, BasCal_SilverlightClient.EventDataService.IEventDataService {
        
        private BeginOperationDelegate onBeginFetchEventTypesDelegate;
        
        private EndOperationDelegate onEndFetchEventTypesDelegate;
        
        private System.Threading.SendOrPostCallback onFetchEventTypesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrUpdateEventDelegate;
        
        private EndOperationDelegate onEndAddOrUpdateEventDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrUpdateEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchEventsByMonthDelegate;
        
        private EndOperationDelegate onEndFetchEventsByMonthDelegate;
        
        private System.Threading.SendOrPostCallback onFetchEventsByMonthCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchEventByGuidDelegate;
        
        private EndOperationDelegate onEndFetchEventByGuidDelegate;
        
        private System.Threading.SendOrPostCallback onFetchEventByGuidCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchUpcomingEventsDelegate;
        
        private EndOperationDelegate onEndFetchUpcomingEventsDelegate;
        
        private System.Threading.SendOrPostCallback onFetchUpcomingEventsCompletedDelegate;
        
        private BeginOperationDelegate onBeginFetchUpcomingEventsShortDelegate;
        
        private EndOperationDelegate onEndFetchUpcomingEventsShortDelegate;
        
        private System.Threading.SendOrPostCallback onFetchUpcomingEventsShortCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddDelegate;
        
        private EndOperationDelegate onEndAddDelegate;
        
        private System.Threading.SendOrPostCallback onAddCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public EventDataServiceClient() {
        }
        
        public EventDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<FetchEventTypesCompletedEventArgs> FetchEventTypesCompleted;
        
        public event System.EventHandler<AddOrUpdateEventCompletedEventArgs> AddOrUpdateEventCompleted;
        
        public event System.EventHandler<FetchEventsByMonthCompletedEventArgs> FetchEventsByMonthCompleted;
        
        public event System.EventHandler<FetchEventByGuidCompletedEventArgs> FetchEventByGuidCompleted;
        
        public event System.EventHandler<FetchUpcomingEventsCompletedEventArgs> FetchUpcomingEventsCompleted;
        
        public event System.EventHandler<FetchUpcomingEventsShortCompletedEventArgs> FetchUpcomingEventsShortCompleted;
        
        public event System.EventHandler<AddCompletedEventArgs> AddCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IEventDataService.BeginFetchEventTypes(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchEventTypes(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO> BasCal_SilverlightClient.EventDataService.IEventDataService.EndFetchEventTypes(System.IAsyncResult result) {
            return base.Channel.EndFetchEventTypes(result);
        }
        
        private System.IAsyncResult OnBeginFetchEventTypes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).BeginFetchEventTypes(callback, asyncState);
        }
        
        private object[] OnEndFetchEventTypes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO> retVal = ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).EndFetchEventTypes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchEventTypesCompleted(object state) {
            if ((this.FetchEventTypesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchEventTypesCompleted(this, new FetchEventTypesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchEventTypesAsync() {
            this.FetchEventTypesAsync(null);
        }
        
        public void FetchEventTypesAsync(object userState) {
            if ((this.onBeginFetchEventTypesDelegate == null)) {
                this.onBeginFetchEventTypesDelegate = new BeginOperationDelegate(this.OnBeginFetchEventTypes);
            }
            if ((this.onEndFetchEventTypesDelegate == null)) {
                this.onEndFetchEventTypesDelegate = new EndOperationDelegate(this.OnEndFetchEventTypes);
            }
            if ((this.onFetchEventTypesCompletedDelegate == null)) {
                this.onFetchEventTypesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchEventTypesCompleted);
            }
            base.InvokeAsync(this.onBeginFetchEventTypesDelegate, null, this.onEndFetchEventTypesDelegate, this.onFetchEventTypesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IEventDataService.BeginAddOrUpdateEvent(BasCal_SilverlightClient.EventDataService.UpcomingEventDTO eve, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrUpdateEvent(eve, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string BasCal_SilverlightClient.EventDataService.IEventDataService.EndAddOrUpdateEvent(System.IAsyncResult result) {
            return base.Channel.EndAddOrUpdateEvent(result);
        }
        
        private System.IAsyncResult OnBeginAddOrUpdateEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            BasCal_SilverlightClient.EventDataService.UpcomingEventDTO eve = ((BasCal_SilverlightClient.EventDataService.UpcomingEventDTO)(inValues[0]));
            return ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).BeginAddOrUpdateEvent(eve, callback, asyncState);
        }
        
        private object[] OnEndAddOrUpdateEvent(System.IAsyncResult result) {
            string retVal = ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).EndAddOrUpdateEvent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOrUpdateEventCompleted(object state) {
            if ((this.AddOrUpdateEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrUpdateEventCompleted(this, new AddOrUpdateEventCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrUpdateEventAsync(BasCal_SilverlightClient.EventDataService.UpcomingEventDTO eve) {
            this.AddOrUpdateEventAsync(eve, null);
        }
        
        public void AddOrUpdateEventAsync(BasCal_SilverlightClient.EventDataService.UpcomingEventDTO eve, object userState) {
            if ((this.onBeginAddOrUpdateEventDelegate == null)) {
                this.onBeginAddOrUpdateEventDelegate = new BeginOperationDelegate(this.OnBeginAddOrUpdateEvent);
            }
            if ((this.onEndAddOrUpdateEventDelegate == null)) {
                this.onEndAddOrUpdateEventDelegate = new EndOperationDelegate(this.OnEndAddOrUpdateEvent);
            }
            if ((this.onAddOrUpdateEventCompletedDelegate == null)) {
                this.onAddOrUpdateEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrUpdateEventCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrUpdateEventDelegate, new object[] {
                        eve}, this.onEndAddOrUpdateEventDelegate, this.onAddOrUpdateEventCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IEventDataService.BeginFetchEventsByMonth(int m, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchEventsByMonth(m, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> BasCal_SilverlightClient.EventDataService.IEventDataService.EndFetchEventsByMonth(System.IAsyncResult result) {
            return base.Channel.EndFetchEventsByMonth(result);
        }
        
        private System.IAsyncResult OnBeginFetchEventsByMonth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int m = ((int)(inValues[0]));
            return ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).BeginFetchEventsByMonth(m, callback, asyncState);
        }
        
        private object[] OnEndFetchEventsByMonth(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> retVal = ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).EndFetchEventsByMonth(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchEventsByMonthCompleted(object state) {
            if ((this.FetchEventsByMonthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchEventsByMonthCompleted(this, new FetchEventsByMonthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchEventsByMonthAsync(int m) {
            this.FetchEventsByMonthAsync(m, null);
        }
        
        public void FetchEventsByMonthAsync(int m, object userState) {
            if ((this.onBeginFetchEventsByMonthDelegate == null)) {
                this.onBeginFetchEventsByMonthDelegate = new BeginOperationDelegate(this.OnBeginFetchEventsByMonth);
            }
            if ((this.onEndFetchEventsByMonthDelegate == null)) {
                this.onEndFetchEventsByMonthDelegate = new EndOperationDelegate(this.OnEndFetchEventsByMonth);
            }
            if ((this.onFetchEventsByMonthCompletedDelegate == null)) {
                this.onFetchEventsByMonthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchEventsByMonthCompleted);
            }
            base.InvokeAsync(this.onBeginFetchEventsByMonthDelegate, new object[] {
                        m}, this.onEndFetchEventsByMonthDelegate, this.onFetchEventsByMonthCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IEventDataService.BeginFetchEventByGuid(System.Guid guid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchEventByGuid(guid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        BasCal_SilverlightClient.EventDataService.UpcomingEventDTO BasCal_SilverlightClient.EventDataService.IEventDataService.EndFetchEventByGuid(System.IAsyncResult result) {
            return base.Channel.EndFetchEventByGuid(result);
        }
        
        private System.IAsyncResult OnBeginFetchEventByGuid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid guid = ((System.Guid)(inValues[0]));
            return ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).BeginFetchEventByGuid(guid, callback, asyncState);
        }
        
        private object[] OnEndFetchEventByGuid(System.IAsyncResult result) {
            BasCal_SilverlightClient.EventDataService.UpcomingEventDTO retVal = ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).EndFetchEventByGuid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchEventByGuidCompleted(object state) {
            if ((this.FetchEventByGuidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchEventByGuidCompleted(this, new FetchEventByGuidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchEventByGuidAsync(System.Guid guid) {
            this.FetchEventByGuidAsync(guid, null);
        }
        
        public void FetchEventByGuidAsync(System.Guid guid, object userState) {
            if ((this.onBeginFetchEventByGuidDelegate == null)) {
                this.onBeginFetchEventByGuidDelegate = new BeginOperationDelegate(this.OnBeginFetchEventByGuid);
            }
            if ((this.onEndFetchEventByGuidDelegate == null)) {
                this.onEndFetchEventByGuidDelegate = new EndOperationDelegate(this.OnEndFetchEventByGuid);
            }
            if ((this.onFetchEventByGuidCompletedDelegate == null)) {
                this.onFetchEventByGuidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchEventByGuidCompleted);
            }
            base.InvokeAsync(this.onBeginFetchEventByGuidDelegate, new object[] {
                        guid}, this.onEndFetchEventByGuidDelegate, this.onFetchEventByGuidCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IEventDataService.BeginFetchUpcomingEvents(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchUpcomingEvents(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO> BasCal_SilverlightClient.EventDataService.IEventDataService.EndFetchUpcomingEvents(System.IAsyncResult result) {
            return base.Channel.EndFetchUpcomingEvents(result);
        }
        
        private System.IAsyncResult OnBeginFetchUpcomingEvents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).BeginFetchUpcomingEvents(callback, asyncState);
        }
        
        private object[] OnEndFetchUpcomingEvents(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO> retVal = ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).EndFetchUpcomingEvents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchUpcomingEventsCompleted(object state) {
            if ((this.FetchUpcomingEventsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchUpcomingEventsCompleted(this, new FetchUpcomingEventsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchUpcomingEventsAsync() {
            this.FetchUpcomingEventsAsync(null);
        }
        
        public void FetchUpcomingEventsAsync(object userState) {
            if ((this.onBeginFetchUpcomingEventsDelegate == null)) {
                this.onBeginFetchUpcomingEventsDelegate = new BeginOperationDelegate(this.OnBeginFetchUpcomingEvents);
            }
            if ((this.onEndFetchUpcomingEventsDelegate == null)) {
                this.onEndFetchUpcomingEventsDelegate = new EndOperationDelegate(this.OnEndFetchUpcomingEvents);
            }
            if ((this.onFetchUpcomingEventsCompletedDelegate == null)) {
                this.onFetchUpcomingEventsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchUpcomingEventsCompleted);
            }
            base.InvokeAsync(this.onBeginFetchUpcomingEventsDelegate, null, this.onEndFetchUpcomingEventsDelegate, this.onFetchUpcomingEventsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IEventDataService.BeginFetchUpcomingEventsShort(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginFetchUpcomingEventsShort(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> BasCal_SilverlightClient.EventDataService.IEventDataService.EndFetchUpcomingEventsShort(System.IAsyncResult result) {
            return base.Channel.EndFetchUpcomingEventsShort(result);
        }
        
        private System.IAsyncResult OnBeginFetchUpcomingEventsShort(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).BeginFetchUpcomingEventsShort(callback, asyncState);
        }
        
        private object[] OnEndFetchUpcomingEventsShort(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> retVal = ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).EndFetchUpcomingEventsShort(result);
            return new object[] {
                    retVal};
        }
        
        private void OnFetchUpcomingEventsShortCompleted(object state) {
            if ((this.FetchUpcomingEventsShortCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.FetchUpcomingEventsShortCompleted(this, new FetchUpcomingEventsShortCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void FetchUpcomingEventsShortAsync() {
            this.FetchUpcomingEventsShortAsync(null);
        }
        
        public void FetchUpcomingEventsShortAsync(object userState) {
            if ((this.onBeginFetchUpcomingEventsShortDelegate == null)) {
                this.onBeginFetchUpcomingEventsShortDelegate = new BeginOperationDelegate(this.OnBeginFetchUpcomingEventsShort);
            }
            if ((this.onEndFetchUpcomingEventsShortDelegate == null)) {
                this.onEndFetchUpcomingEventsShortDelegate = new EndOperationDelegate(this.OnEndFetchUpcomingEventsShort);
            }
            if ((this.onFetchUpcomingEventsShortCompletedDelegate == null)) {
                this.onFetchUpcomingEventsShortCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnFetchUpcomingEventsShortCompleted);
            }
            base.InvokeAsync(this.onBeginFetchUpcomingEventsShortDelegate, null, this.onEndFetchUpcomingEventsShortDelegate, this.onFetchUpcomingEventsShortCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IEventDataService.BeginAdd(int a, int b, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAdd(a, b, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int BasCal_SilverlightClient.EventDataService.IEventDataService.EndAdd(System.IAsyncResult result) {
            return base.Channel.EndAdd(result);
        }
        
        private System.IAsyncResult OnBeginAdd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int a = ((int)(inValues[0]));
            int b = ((int)(inValues[1]));
            return ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).BeginAdd(a, b, callback, asyncState);
        }
        
        private object[] OnEndAdd(System.IAsyncResult result) {
            int retVal = ((BasCal_SilverlightClient.EventDataService.IEventDataService)(this)).EndAdd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddCompleted(object state) {
            if ((this.AddCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddCompleted(this, new AddCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddAsync(int a, int b) {
            this.AddAsync(a, b, null);
        }
        
        public void AddAsync(int a, int b, object userState) {
            if ((this.onBeginAddDelegate == null)) {
                this.onBeginAddDelegate = new BeginOperationDelegate(this.OnBeginAdd);
            }
            if ((this.onEndAddDelegate == null)) {
                this.onEndAddDelegate = new EndOperationDelegate(this.OnEndAdd);
            }
            if ((this.onAddCompletedDelegate == null)) {
                this.onAddCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddCompleted);
            }
            base.InvokeAsync(this.onBeginAddDelegate, new object[] {
                        a,
                        b}, this.onEndAddDelegate, this.onAddCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override BasCal_SilverlightClient.EventDataService.IEventDataService CreateChannel() {
            return new EventDataServiceClientChannel(this);
        }
        
        private class EventDataServiceClientChannel : ChannelBase<BasCal_SilverlightClient.EventDataService.IEventDataService>, BasCal_SilverlightClient.EventDataService.IEventDataService {
            
            public EventDataServiceClientChannel(System.ServiceModel.ClientBase<BasCal_SilverlightClient.EventDataService.IEventDataService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginFetchEventTypes(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchEventTypes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO> EndFetchEventTypes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO> _result = ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.EventTypeDTO>)(base.EndInvoke("FetchEventTypes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddOrUpdateEvent(BasCal_SilverlightClient.EventDataService.UpcomingEventDTO eve, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = eve;
                System.IAsyncResult _result = base.BeginInvoke("AddOrUpdateEvent", _args, callback, asyncState);
                return _result;
            }
            
            public string EndAddOrUpdateEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("AddOrUpdateEvent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchEventsByMonth(int m, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = m;
                System.IAsyncResult _result = base.BeginInvoke("FetchEventsByMonth", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> EndFetchEventsByMonth(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> _result = ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO>)(base.EndInvoke("FetchEventsByMonth", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchEventByGuid(System.Guid guid, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = guid;
                System.IAsyncResult _result = base.BeginInvoke("FetchEventByGuid", _args, callback, asyncState);
                return _result;
            }
            
            public BasCal_SilverlightClient.EventDataService.UpcomingEventDTO EndFetchEventByGuid(System.IAsyncResult result) {
                object[] _args = new object[0];
                BasCal_SilverlightClient.EventDataService.UpcomingEventDTO _result = ((BasCal_SilverlightClient.EventDataService.UpcomingEventDTO)(base.EndInvoke("FetchEventByGuid", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchUpcomingEvents(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchUpcomingEvents", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO> EndFetchUpcomingEvents(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO> _result = ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventDTO>)(base.EndInvoke("FetchUpcomingEvents", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginFetchUpcomingEventsShort(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("FetchUpcomingEventsShort", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> EndFetchUpcomingEventsShort(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO> _result = ((System.Collections.ObjectModel.ObservableCollection<BasCal_SilverlightClient.EventDataService.UpcomingEventShortDTO>)(base.EndInvoke("FetchUpcomingEventsShort", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAdd(int a, int b, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = a;
                _args[1] = b;
                System.IAsyncResult _result = base.BeginInvoke("Add", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAdd(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("Add", _args, result)));
                return _result;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventDataService.IClientAccessPolicy")]
    public interface IClientAccessPolicy {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IClientAccessPolicy/GetClientAccessPolicy", ReplyAction="http://tempuri.org/IClientAccessPolicy/GetClientAccessPolicyResponse")]
        System.IAsyncResult BeginGetClientAccessPolicy(System.AsyncCallback callback, object asyncState);
        
        byte[] EndGetClientAccessPolicy(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IClientAccessPolicyChannel : BasCal_SilverlightClient.EventDataService.IClientAccessPolicy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetClientAccessPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetClientAccessPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ClientAccessPolicyClient : System.ServiceModel.ClientBase<BasCal_SilverlightClient.EventDataService.IClientAccessPolicy>, BasCal_SilverlightClient.EventDataService.IClientAccessPolicy {
        
        private BeginOperationDelegate onBeginGetClientAccessPolicyDelegate;
        
        private EndOperationDelegate onEndGetClientAccessPolicyDelegate;
        
        private System.Threading.SendOrPostCallback onGetClientAccessPolicyCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ClientAccessPolicyClient() {
        }
        
        public ClientAccessPolicyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ClientAccessPolicyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientAccessPolicyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ClientAccessPolicyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetClientAccessPolicyCompletedEventArgs> GetClientAccessPolicyCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult BasCal_SilverlightClient.EventDataService.IClientAccessPolicy.BeginGetClientAccessPolicy(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetClientAccessPolicy(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] BasCal_SilverlightClient.EventDataService.IClientAccessPolicy.EndGetClientAccessPolicy(System.IAsyncResult result) {
            return base.Channel.EndGetClientAccessPolicy(result);
        }
        
        private System.IAsyncResult OnBeginGetClientAccessPolicy(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((BasCal_SilverlightClient.EventDataService.IClientAccessPolicy)(this)).BeginGetClientAccessPolicy(callback, asyncState);
        }
        
        private object[] OnEndGetClientAccessPolicy(System.IAsyncResult result) {
            byte[] retVal = ((BasCal_SilverlightClient.EventDataService.IClientAccessPolicy)(this)).EndGetClientAccessPolicy(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetClientAccessPolicyCompleted(object state) {
            if ((this.GetClientAccessPolicyCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetClientAccessPolicyCompleted(this, new GetClientAccessPolicyCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetClientAccessPolicyAsync() {
            this.GetClientAccessPolicyAsync(null);
        }
        
        public void GetClientAccessPolicyAsync(object userState) {
            if ((this.onBeginGetClientAccessPolicyDelegate == null)) {
                this.onBeginGetClientAccessPolicyDelegate = new BeginOperationDelegate(this.OnBeginGetClientAccessPolicy);
            }
            if ((this.onEndGetClientAccessPolicyDelegate == null)) {
                this.onEndGetClientAccessPolicyDelegate = new EndOperationDelegate(this.OnEndGetClientAccessPolicy);
            }
            if ((this.onGetClientAccessPolicyCompletedDelegate == null)) {
                this.onGetClientAccessPolicyCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetClientAccessPolicyCompleted);
            }
            base.InvokeAsync(this.onBeginGetClientAccessPolicyDelegate, null, this.onEndGetClientAccessPolicyDelegate, this.onGetClientAccessPolicyCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override BasCal_SilverlightClient.EventDataService.IClientAccessPolicy CreateChannel() {
            return new ClientAccessPolicyClientChannel(this);
        }
        
        private class ClientAccessPolicyClientChannel : ChannelBase<BasCal_SilverlightClient.EventDataService.IClientAccessPolicy>, BasCal_SilverlightClient.EventDataService.IClientAccessPolicy {
            
            public ClientAccessPolicyClientChannel(System.ServiceModel.ClientBase<BasCal_SilverlightClient.EventDataService.IClientAccessPolicy> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetClientAccessPolicy(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetClientAccessPolicy", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndGetClientAccessPolicy(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("GetClientAccessPolicy", _args, result)));
                return _result;
            }
        }
    }
}
